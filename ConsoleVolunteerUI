import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Scanner;

/**
 * Represents an instance of a volunteer login session.
 * @author Dennis Kenyon
 * @author Brian Crabtree
 * @author David Anderson
 * @version 31May2015
 *
 */

public class ConsoleVolunteerUI {
	
	/**
	 * A shared Scanner resource used for any place there is System.in.
	 */
	Scanner myScanner = null;
	
	String myExistingJobName = null;
	
	public ConsoleVolunteerUI(String theEmail, ArrayList<Volunteer> theVolunteerList, ArrayList<Job> theJobList, Scanner theScanner) {
		myScanner = theScanner;
		this.volunteerMenu(theEmail, theVolunteerList, theJobList);
	}
	
	/**
	 * The volunteer menu choice 'hub.'
	 * @param theEmail the volunteer's email used to log the volunteer on
	 * @param theVolunteerList a complete list of volunteer objects to help instantiate the current user with
	 * @param theJobList
	 */
	private void volunteerMenu(String theEmail, ArrayList<Volunteer> theVolunteerList, ArrayList<Job> theJobList) {
		Volunteer currentUser = null;
		for (Volunteer volunteer : theVolunteerList) {
			if (volunteer.getEmail().equals(theEmail)) {
				currentUser = volunteer;
			}
		}
		System.out.println();
		System.out.println("Welcome, Volunteer " + currentUser.getFirstName() + " " + currentUser.getLastName() + "!");
		promptVolunteerMenu();
		String userInput = "";
		userInput = myScanner.next();
		while (!userInput.equals("5")) {
			if (userInput.equals("1")) { //menu choice 1
				volunteerMenu1(currentUser, theJobList, myScanner);
			} else if (userInput.equals("2")) {
				volunteerMenu2(currentUser);
			} else if (userInput.equals("3")) {
				volunteerMenu3(currentUser);
			} else if (userInput.equals("4")) {
				volunteerMenu4(currentUser);
			} else {
				System.out.println("Not a valid command. Type 1, 2, 3, 4 or 5.");
			}
			userInput = myScanner.next();
		}
		System.out.println("Goodbye.");
		System.out.println("---CONSOLE DEMO OFFLINE---");
	}
	
	/**
	 * This method represents User Story 3: As a Volunteer, I want to volunteer for a job.
	 * @param currentUser the current volunteer user
	 * @param theJobList a master list of all the jobs that exist in the system
	 * @param scanner a passed scanner to take in text in the console
	 */
	private void volunteerMenu1(Volunteer currentUser, ArrayList<Job> theJobList, Scanner scanner) {
		System.out.println("What is the name of the job you want to sign up for?");
		scanner.nextLine();
		String jobName = scanner.nextLine();
		//checks to see if business rule 7 is violated in this if statement
		if (businessRuleSevenCheck(theJobList, currentUser, scanner, jobName)) {
			System.out.println("--ERROR: Because " + jobName + " has the same date as " + myExistingJobName + ", you aren't able to sign up for it.");
			System.out.println();
			System.out.println();
			promptVolunteerMenu();
		} else if (businessRuleSixCheck(theJobList, currentUser, jobName)) {
			System.out.println("--ERROR: Can't sign up for a job that has already passed. ");
			System.out.println();
			System.out.println();
			promptVolunteerMenu();
		} else {
			for (Job job : theJobList) {
				if (job.getName().equals(jobName)) {
					System.out.println();
					System.out.println("Job Description: ");
					System.out.println("	" + job.getInfo());
					System.out.println();
					System.out.println("Current workload demands for this job (# of slots filled / # of maximum for that category): ");
					System.out.println("	Light: " + job.getLightVolunteers().size() + "/" + job.getMaxLight()); 
					System.out.println("	Medium: " + job.getMediumVolunteers().size() + "/" + job.getMaxMed());
					System.out.println("	Heavy: " + job.getHeavyVolunteers().size() + "/" + job.getMaxHeavy());
				}
			}
			System.out.println();
			System.out.println("What is the work load you're able to contribute (type either heavy, medium, or light)?");
			String workLoad = scanner.next();
			int intWorkLoad = -1;
			if (workLoad.equals("heavy")) {
				intWorkLoad = 2;
			} else if (workLoad.equals("medium")) {
				intWorkLoad = 1;
			} else if (workLoad.equals("light")) {
				intWorkLoad = 0;
			} else {
				System.out.println("Enter either heavy, medium, or light for the workload you can contribute.");
			}
			
			//check if business rule 3 fails
			if (!businessRuleThreeCheck(theJobList, jobName, workLoad)) {
				promptVolunteerMenu();
			} else {
				for (Job job : currentUser.viewJobsCanSignUpFor()) {
					if (jobName.equals(job.getName())) {
						if (currentUser.signUpForJob(job, intWorkLoad) == true) {
							System.out.println("You have succesfully signed up for " + job.getName() 
									+ " - " + job.getDay() + "/" + job.getMonth() + "/2015 @ " + job.getLocation() + "!");
							//following try/catch is from: http://stackoverflow.com/questions/1625234/how-to-append-text-to-an-existing-file-in-java
							try(FileWriter fileWriter = new FileWriter("src/volunteersAndJobs.txt", true);
							          BufferedWriter bufferWriter = new BufferedWriter(fileWriter);
							          PrintWriter out = new PrintWriter(bufferWriter)){
							     out.print(currentUser.getEmail() + "," + job.getName() + "," + workLoad + ",");
							     out.close();
							  }  
							  catch( IOException e ){
								  System.out.println("failed to write");
							      // File writing/opening failed at some stage.
							  }
							System.out.println();
							System.out.println();
							promptVolunteerMenu();
						} else {
							System.out.println("You were not able to sign up for the job. Review that you're qualified to before signing up.\n\n");
							promptVolunteerMenu();
						};
					}
				}
			}
		}
	}
	
	/**
	 * This represents User Story 2: As a Volunteer, I want to view upcoming jobs I can sign up for.
	 * @param currentUser the current volunteer user
	 */
	private void volunteerMenu2(Volunteer currentUser) {
		System.out.println("Available jobs I can sign up for: ");
		for (Job job : currentUser.viewJobsCanSignUpFor()) {
			System.out.println("	" + job.getName() + " - " + job.getMonth() + "/" + job.getDay() + "/2015 @ " + job.getLocation());
		}
		System.out.println("-End of available jobs list.-");
		System.out.println();
		System.out.println();
		promptVolunteerMenu();
	}
	
	/**
	 * This method represents User Story 4: As a Volunteer, I want to view the jobs I am signed up for.
	 * @param currentUser
	 */
	private void volunteerMenu3(Volunteer currentUser) {
		System.out.println();
		System.out.println("Jobs currently signed up for:");
		if (currentUser.getJobs().size() == 0) {
			System.out.println("-NOT SIGNED UP FOR ANY JOBS YET-");
			System.out.println();
			System.out.println();
			promptVolunteerMenu();
		} else {
			for (Job job : currentUser.getJobs()) {
				System.out.println("	" + job.getName() + " - " + job.getMonth() + "/" + job.getDay() + "/2015 @ " + job.getLocation());
			}
			System.out.println();
			System.out.println();
			promptVolunteerMenu();
		}
	}
	
	/**
	 * Lists the account details for this volunteer.
	 * @param currentUser the current volunteer user
	 */
	private void volunteerMenu4(Volunteer currentUser) {
		System.out.println("Account details:");
		System.out.println("	Name: " + currentUser.getFirstName() + " " + currentUser.getLastName());
		System.out.println("	Email: " + currentUser.getEmail());
		System.out.println("	Phone number: " + currentUser.getPhoneNumber());
		System.out.println("	Address: " + currentUser.getAddress());
		System.out.println("	Access level: Volunteer");
		System.out.println();
		System.out.println();
		promptVolunteerMenu();
	}
	
	/**
	 * Prints out the volunteer menu prompt.
	 */
	private void promptVolunteerMenu() {
		System.out.println("---VOLUNTEER OPTIONS---");
		System.out.println("    1) Sign up for a job");
		System.out.println("    2) View upcoming jobs I can sign up for");
		System.out.println("    3) View jobs currently signed up for");
		System.out.println("    4) View my account information");
		System.out.println("    5) Logout");
	}
	
	/**
	 * Checks to see if business rule 3 is violated.
	 * Business rule 3 is: A Volunteer may not sign up for a work category on a job if the maximum number of Volunteers
	 * for that work category has already been reached.
	 * @param theJobList master list of jobs
	 * @param currentUser the current user identity
	 * @param scanner the global Scanner object
	 * @param jobName the name of the job
	 * @return true if business rule 3 is satisfied, false if violated
	 */
	private boolean businessRuleThreeCheck( ArrayList<Job> theJobList, String jobName, String workLoad) {
		Job thisJob = null;
		for (Job job : theJobList) {
			if (job.getName().equals(jobName)) {
				thisJob = job;
			}
		}
		if (workLoad.equalsIgnoreCase("heavy") && (thisJob.getHeavyVolunteers().size() / thisJob.getMaxHeavy()) == 1) {
			System.out.println("--ERROR: Heavy volunteer slots are already filled!");
			System.out.println();
			System.out.println();
			return false;
		} else if (workLoad.equals("medium") && (thisJob.getMediumVolunteers().size() / thisJob.getMaxMed()) == 1) {
			System.out.println("--ERROR: Medium volunteer slots are already filled!");
			System.out.println();
			System.out.println();
			return false;
		} else if (workLoad.equals("light") && (thisJob.getLightVolunteers().size() / thisJob.getMaxLight()) == 1) {
			System.out.println("--ERROR: Light volunteer slots are already filled!");
			System.out.println();
			System.out.println();
			return false;
		}
		return true;
	}
	
	/**
	 * Checks to see if business rule 6 is violated.
	 * Business rule 6 is: A Volunteer may not sign up for a job that has passed.
	 * @return false if business rule 6 violated, true otherwise
	 */
	private boolean businessRuleSixCheck(ArrayList<Job> theJobList, Volunteer currentUser, String jobName) {
		Calendar cal = Calendar.getInstance();
	    int currentDay = cal.get(Calendar.DAY_OF_MONTH);
	    int currentMonth = cal.get(Calendar.MONTH) + 1;
		int potentialJobDay = 0;
		int potentialJobMonth = 0;
		
		for (Job job : theJobList) {
			if (job.getName().equalsIgnoreCase(jobName)) {
				potentialJobDay = job.getDay();
				potentialJobMonth = job.getMonth();
			}
		}
		if (currentDay + currentMonth * 30 < potentialJobDay + potentialJobMonth * 30) {
			return false;
		}
		return true;
	}
		
	/**
	 * Checks to see if business rule 7 is violated.
	 * Business rule 7 is: A volunteer may not sign up for two jobs on the same day.
	 * @param theJobList master list of jobs
	 * @param currentUser the current user identity
	 * @param scanner the global Scanner object
	 * @param jobName the name of the job
	 * @return true is business rule is violated, false otherwise.
	 */
	private boolean businessRuleSevenCheck(ArrayList<Job> theJobList, Volunteer currentUser, Scanner scanner, String jobName) {
		int potentialJobDay = 0;
		int potentialJobMonth = 0;
		
		for (Job job : theJobList) {
			if (job.getName().equalsIgnoreCase(jobName)) {
				potentialJobDay = job.getDay();
				potentialJobMonth = job.getMonth();
			}
		}
		int existingJobDay = 0;
		int existingJobMonth = 0;
		for (Job job : currentUser.getJobs()) {
			if (job.getDay() == potentialJobDay && job.getMonth() == potentialJobMonth) {
				existingJobDay = potentialJobDay;
				existingJobMonth = potentialJobMonth;
				myExistingJobName = job.getName();
			}
		}
		return (existingJobDay == potentialJobDay && existingJobMonth == potentialJobMonth);
	}
}
